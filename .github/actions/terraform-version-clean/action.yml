name: Terraform Version Bootstrapping Step
description: 'Apply bootstrapping step'

inputs:
  AWS_ACCESS_KEY_ID_TF:
    description: 'AWS access key'
    required: true
  AWS_SECRET_ACCESS_KEY_TF:
    description: 'AWS secret key'
    required: true
  TF_DIR:
    description: 'Terraform directory'
    required: true
  TF_VERSION:
    description: 'Terraform version'
    required: false
    default: 1.3.x
  
runs:
  using: composite
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID_TF }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY_TF }}
        aws-region: eu-west-3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.TF_VERSION }}

    - name: Terraform init
      shell: bash
      run: |
        terraform -chdir=${{ inputs.TF_DIR }} init \
          -upgrade \
          -reconfigure

    - name: Get backend configuration
      id: backend-config
      shell: bash
      run: |
        jq '.backend.config' ${{ inputs.TF_DIR }}/.terraform/terraform.tfstate > backend-config.json
        echo BUCKET=$(jq -r '.bucket' backend-config.json) >> $GITHUB_OUTPUT
        echo KEY=$(jq -r '.key' backend-config.json) >> $GITHUB_OUTPUT
        echo REGION=$(jq -r '.region' backend-config.json) >> $GITHUB_OUTPUT
        echo DYNAMODB_TABLE=$(jq -r '.dynamodb_table' backend-config.json) >> $GITHUB_OUTPUT

    - name: Clean S3 bucket
      shell: bash
      run: aws s3 rm s3://${{ steps.backend-config.outputs.BUCKET }}/${{ steps.backend-config.outputs.KEY }}
    
    - name: Clean DynamoDB table
      shell: bash
      run: |
        aws dynamodb delete-item \
          --table-name ${{ steps.backend-config.outputs.DYNAMODB_TABLE }} \
          --key '{ "LockID": { "S": "${{ steps.backend-config.outputs.BUCKET }}/${{ steps.backend-config.outputs.KEY }}-md5" }}'
          