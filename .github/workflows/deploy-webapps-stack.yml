name: Deploy Webapps Stack

on:
  # repository_dispatch:
  #   types: [deploy-webapps-stack]
  workflow_dispatch:
    inputs:
      RUNNER_ENVIRONMENT:
        description: 'Runner environment'
        type: string
        # required: true
        default: test
      EC2_ENVIRONMENT:
        description: 'EC2 environment'
        type: string
        # required: true
        default: notprod
      # SERVICE_NAME:
      #   description: 'Service name'
      #   type: string
      #   required: true
      SERVICE_VERSION_NAME:
        description: 'Service version name'
        type: string
        # required: true
        default: DEVOPS-492
      JIRA_CODE:
        description: 'Jira code'
        type: string
        # required: true
        default: DEVOPS-492
      SERVICE_VERSION_REF:
        description: 'Service version ref, a JSON map of repositories and their refs'
        type: string
        # required: true
        default: '{ "api-lumen": "tech/DEVOPS-492", "intranet": "tech/DEVOPS-492" }'
      NOTIFICATIONS_TEAMS:
        description: 'Notifications Teams'
        type: boolean
        # required: true
        default: false
      TF_VERSION:
        description: 'Terraform version'
        type: string
        required: false
        default: '1.3.x'

env:
  GIT_SSH_COMMAND: "echo '${{ secrets.GH_TF_SSH_KEY }}' > id_rsa
    && ssh-keyscan github.com > known_hosts
    && chmod 600 id_rsa known_hosts
    && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
  # same as -input=false in CLI
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  # will create database & make credentials available to intranet
  api-requirements:
    name: API Requirements
    runs-on: [self-hosted, "${{ inputs.RUNNER_ENVIRONMENT }}"]
    outputs:
      TF_DB_ACTIONS: ${{ steps.requirements.outputs.TF_DB_ACTIONS }}
      DB_SOURCE_NAME: ${{ steps.requirements.outputs.DB_SOURCE_NAME }}
      DB_TARGET_NAME: ${{ steps.requirements.outputs.DB_TARGET_NAME }}
    env:
      TF_CLI_ARGS_init: -backend-config="key=ec2/webapps/api-public/${{inputs.EC2_ENVIRONMENT}}/version/${{ inputs.SERVICE_VERSION_NAME }}/terraform.tfstate"
      TF_VAR_allow_access: 'internal'
      TF_VAR_environment: ${{ inputs.EC2_ENVIRONMENT }}
      TF_VAR_runs_on: ${{ inputs.RUNNER_ENVIRONMENT }}
      TF_VAR_service_version_name: ${{ inputs.SERVICE_VERSION_NAME }}
      TF_VAR_service_version_ref: ${{ inputs.API_PUBLIC_VERSION_REF }}

    steps:
      - name: Checkout api repository
        uses: actions/checkout@v4
        with:
          # repository: 'sonergia/api-lumen'
          repository: 'sonergia/api-lumen-devops'
          ref: ${{ inputs.API_PUBLIC_VERSION_REF }}
          ssh-key: ${{ secrets.GH_TF_SSH_KEY }}

      - name: Requirements
        id: requirements
        uses: sonergia/github-reusable-workflows/.github/actions/terraform-version-requirements@2.x
        with:
          TF_DIR: '.terraform/version'
          TF_VERSION: ${{ inputs.TF_VERSION }}
          AWS_ACCESS_KEY_ID_TF: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          AWS_SECRET_ACCESS_KEY_TF: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}

  # deploy-legacy:
  #   name: Deploy Legacy
  #   needs: [api-requirements]

  #   uses: sonergia/api-lumen-devops/.github/workflows/deploy-legacy.yaml@tech/DEVOPS-492
  #   with:
  #     RUNNER_ENVIRONMENT: ${{ inputs.RUNNER_ENVIRONMENT }}
  #     EC2_ENVIRONMENT: ${{ inputs.EC2_ENVIRONMENT }}
  #     SERVICE_VERSION_NAME: ${{ inputs.SERVICE_VERSION_NAME }}
  #     SERVICE_VERSION_REF: ${{ inputs.API_PUBLIC_VERSION_REF }}
  #     NOTIFICATIONS_TEAMS: ${{ inputs.NOTIFICATIONS_TEAMS }}
  #     TF_VERSION: ${{ inputs.TF_VERSION }}
  #     JIRA_CODE: ${{ inputs.JIRA_CODE }}
  #   secrets:
  #     GH_TF_SSH_KEY: ${{ secrets.GH_TF_SSH_KEY }}
  #     MS_TEAMS_WEBHOOK_URI_CHANNEL_DEPLOY: ${{ secrets.MS_TEAMS_WEBHOOK_URI_CHANNEL_DEPLOY }}
  #     MS_TEAMS_WEBHOOK_URI_CHANNEL_DATABASES: ${{ secrets.MS_TEAMS_WEBHOOK_URI_CHANNEL_DATABASES }}
  #     AWS_ACCESS_KEY_ID_TF: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
  #     AWS_SECRET_ACCESS_KEY_TF: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
  #     COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

  # api requirements
  # api database
  # intranet requirements
  # parallelized api-public and intranet provisioning
  # parallelized api-public and intranet bootstrapping