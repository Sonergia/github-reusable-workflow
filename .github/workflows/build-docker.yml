name: build docker

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: false
        type: string
        default: eu-west-3
      DOCKERFILE_BUILD_CONTEXT:
        required: true
        type: string
      SERVICE_NAMESPACE:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      IMAGE_STATIC_TAG:
        required: false
        type: string
      CONCURRENCY_CODE:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      IMAGE_TAG:
        description: "Docker image tag"
        value: ${{ jobs.build-push-docker-image.outputs.IMAGE_TAG }}
      IMAGE_SHA:
        description: "Docker image git commit SHA tag"
        value: ${{ jobs.build-push-docker-image.outputs.IMAGE_SHA }}

concurrency:
  group: ${{ github.workflow }}-${{ inputs.SERVICE_NAMESPACE }}-${{ inputs.IMAGE_NAME }}-${{ inputs.CONCURRENCY_CODE }}
  cancel-in-progress: true

env:
  AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}
  DOCKERFILE_BUILD_CONTEXT: ${{ inputs.DOCKERFILE_BUILD_CONTEXT }}
  SERVICE_NAMESPACE: ${{ inputs.SERVICE_NAMESPACE }}
  IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
  IMAGE_STATIC_TAG: ${{ inputs.IMAGE_STATIC_TAG }}

jobs:
  build-push-docker-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR Registry
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SERVICE_NAMESPACE }}/${{ env.IMAGE_NAME }}
        run: |
          aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY} \
            --region ${AWS_DEFAULT_REGION} || true

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SERVICE_NAMESPACE }}/${{ env.IMAGE_NAME }}
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha
            type=raw,value=${{ env.IMAGE_STATIC_TAG }}

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1
      #   id: qemu
      #   with:
      #     image: tonistiigi/binfmt:latest
      #     platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push Docker images
        id: build-image
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SERVICE_NAMESPACE }}/${{ env.IMAGE_NAME }}
          GIT_SHA_SHORT: ${{ steps.docker-meta.outputs.sha_short }}
        with:
          context: ${{ env.DOCKERFILE_BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_BUILD_CONTEXT }}/Dockerfile
          target: prod
          # platforms: ${{ steps.qemu.outputs.platforms }}
          platforms: linux/amd64
          # build-args: |
          #   ARGS=${{ env.ARGS }}
          push: true
          tags: |
            ${{ steps.docker-meta.outputs.tags }}
          labels: |
            ${{ steps.docker-meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

    outputs:
      IMAGE_TAG: ${{ steps.docker-meta.outputs.version }}
      IMAGE_SHA: ${{ steps.docker-meta.outputs.sha_short }}
