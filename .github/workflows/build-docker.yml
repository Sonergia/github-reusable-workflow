name: build docker workflow

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: false
        type: string
        default: eu-west-3
      DOCKERFILE_BUILD_CONTEXT:
        required: true
        type: string
      DOCKERFILE_BUILD_PATH:
        required: true
        type: string
      SERVICE_NAMESPACE:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      IMAGE_STATIC_TAG:
        required: false
        type: string
      CONCURRENCY_CODE:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ inputs.SERVICE_NAMESPACE }}-${{ inputs.IMAGE_NAME }}-${{ inputs.CONCURRENCY_CODE }}
  # cancel-in-progress: true

jobs:
  build-push-docker-image:
    name: Build docker ${{ inputs.SERVICE_NAMESPACE }}/${{ inputs.IMAGE_NAME }}
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     container: ${{fromJson(inputs.IMAGE_NAMES)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check build artifact exists
        uses: xSAVIKx/artifact-exists-action@v0
        id: check-build-artifact
        with:
          name: build-artifact

      - name: Download build artifact
        if: ${{ steps.check-build-artifact.outputs.exists == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Untar and delete build archive
        if: ${{ steps.check-build-artifact.outputs.exists == 'true' }}
        run: tar -xvf build.tar && rm build.tar

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.SERVICE_NAMESPACE }}/${{ inputs.IMAGE_NAME }}
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha
            type=raw,value=${{ inputs.IMAGE_STATIC_TAG }}

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1
      #   id: qemu
      #   with:
      #     image: tonistiigi/binfmt:latest
      #     platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push Docker images
        id: build-image
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.SERVICE_NAMESPACE }}/${{ inputs.IMAGE_NAME }}
          GIT_SHA_SHORT: ${{ steps.docker-meta.outputs.sha_short }}
        with:
          context: ${{ inputs.DOCKERFILE_BUILD_CONTEXT }}
          file: ${{ inputs.DOCKERFILE_BUILD_PATH }}/Dockerfile
          target: prod
          # platforms: ${{ steps.qemu.outputs.platforms }}
          platforms: linux/amd64
          # AWS_ECR_REGISTRY => namespace of base docker images (nginx, php...)
          build-args: |
            AWS_ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}/docker
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
