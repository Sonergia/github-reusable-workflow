name: Deploy status

on:
  workflow_call:
    inputs:
      CLUSTER:
        required: true
        type: string
      SERVICES:
        required: true
        type: string
      IMAGE_SHA:
        required: false
        type: string
        default: null
      IMAGE_TAG:
        required: false
        type: string
        default: null
      JIRA_CODE:
        required: false
        type: string
        default: ''
      NOTIFICATIONS_TEAMS:  # booleans must be treated as string
        required: false
        type: string
        default: 'true'
      NOTIFICATIONS_JIRA:
        required: false
        type: string
        default: 'true'
      DEPLOY_STATUS:
        required: false
        type: string
        default: ''
    secrets:
      MS_TEAMS_WEBHOOK_URI:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true

concurrency:
  group: deploy-status-${{ github.workflow }}-${{ inputs.CLUSTER }}
  cancel-in-progress: false

jobs:
  deploy-status:
    name: Deploy status of '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'
    runs-on: ubuntu-latest
    timeout-minutes: 1

    # For deployment-action and checkout
    permissions:
      contents: read
      deployments: write

    strategy:
      matrix:
        service: ${{ fromJson(inputs.SERVICES) }}

    steps:
      - uses: actions/checkout@v3
        if: always()

      - name: Check deploy status
        id: check-deploy-status
        if: always()
        run: |
          DEPLOY_STATUS=${{ inputs.DEPLOY_STATUS }}
          if [ -z "${DEPLOY_STATUS}" ]; then
            echo "::warning title=Deploy status::DEPLOY_STATUS input is empty, defaults to 'error'"
            DEPLOY_STATUS=error
          fi
          echo "DEPLOY_STATUS=${DEPLOY_STATUS}" >> ${GITHUB_OUTPUT}

      # Get commit message before checking out reusable workflows
      - name: Git output commit message
        id: git-commit
        if: always()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> ${GITHUB_OUTPUT}

      - name: Map vars with github environment
        id: map-github-env
        if: always()
        run: |
          # Available env: development, testing, staging, or production
          GITHUB_ENVIRONMENT=${{ inputs.CLUSTER }}
          if [ "${{ inputs.CLUSTER }}" == "release" ]; then
            GITHUB_ENVIRONMENT="staging"
          fi
          echo "GITHUB_ENVIRONMENT=${GITHUB_ENVIRONMENT}" >> ${GITHUB_OUTPUT}

      - name: Change string case function
        id: string
        uses: ASzc/change-string-case-action@v2
        if: always()
        with:
          string: ${{ inputs.CLUSTER }}

      - name: Create GitHub deployment
        id: github-deployment
        uses: chrnorm/deployment-action@v2
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' }}
        with:
          token: ${{ github.token }}
          # error, failure, in_progress, queued, pending, success, (inactive)
          initial-status: ${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          auto-inactive: false
          task: deploy-${{ inputs.CLUSTER }}-${{ inputs.IMAGE_SHA }}
          # Use log-url since JIRA does not display environment-url
          # environment-url: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
          log-url: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
          # log-url: https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}
          environment: ${{ steps.map-github-env.outputs.GITHUB_ENVIRONMENT }}
          # Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future.
          transient-environment: ${{ inputs.CLUSTER != 'prod' }}
          description: ${{ matrix.service }} (${{ inputs.IMAGE_SHA }} / ${{ inputs.IMAGE_TAG }}) deployed on cluster ${{ inputs.CLUSTER }}

      - name: Login JIRA
        uses: atlassian/gajira-login@master
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' && inputs.JIRA_CODE != '' && steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success' }}
        env:
          JIRA_BASE_URL: https://sonergia.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Comment on JIRA issue
        uses: atlassian/gajira-comment@23b9748b2d2ea1c486bd788daed8b4c00fccf362
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' && inputs.JIRA_CODE != '' && steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success' }}
        with:
          issue: ${{ inputs.JIRA_CODE }}
          comment: |
            Ticket d√©ploy√© sur le cluster ${{ steps.string.outputs.uppercase }} (cf Releases):
              - Url du service: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
              - Logs du service: https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}

      - name: Deploy status style
        id: deploy-status-style
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          DEPLOY_COLOR=

          if [ "${DEPLOY_STATUS}" == "success" ]; then
            DEPLOY_STATUS="‚úÖ ${DEPLOY_STATUS}"
            DEPLOY_COLOR=2cbe4e
          elif [ "${DEPLOY_STATUS}" == "failure" ]; then
            DEPLOY_STATUS="‚ùó${DEPLOY_STATUS}: l'app ne d√©marre pas correctement et n'a pas pu √™tre livr√©e (rollback) !"
            DEPLOY_COLOR=ffc107
          elif [ "${DEPLOY_STATUS}" == "error" ]; then
            DEPLOY_STATUS="‚ùå ${DEPLOY_STATUS}: erreur de CICD, appelle un DevOps !"
            DEPLOY_COLOR=cb2431
          fi

          echo "DEPLOY_STATUS=${DEPLOY_STATUS}" >> ${GITHUB_OUTPUT}
          echo "DEPLOY_COLOR=${DEPLOY_COLOR}" >> ${GITHUB_OUTPUT}

      # Checkout reusable workflow to get bash scripts
      - uses: actions/checkout@v3
        with:
          repository: Sonergia/github-reusable-workflows
          ref: '2.x'
          # ref: 'delivery' # Only when testing ############## /!\ ##############

      - name: Teams notification content
        id: teams-notification-content
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        run: |
          CUSTOM_FACT_JIRA=""
          if [ ! -z "${{ inputs.JIRA_CODE }}" ]; then
            CUSTOM_FACT_JIRA="[${{ inputs.JIRA_CODE }}](https://sonergia.atlassian.net/browse/${{ inputs.JIRA_CODE }})"
          fi
          echo "CUSTOM_FACT_JIRA=${CUSTOM_FACT_JIRA}" >> ${GITHUB_OUTPUT}

      # Notify at the end of workflow
      # You can use markdown: https://support.microsoft.com/en-us/office/use-markdown-formatting-in-teams-4d10bd65-55e2-4b2d-a1f3-2bebdcd2c772
      - name: Notify teams channel
        uses: Sonergia/ms-teams-notification@add-potential-action
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: D√©ploiement termin√© !
          notification-color: ${{ steps.deploy-status-style.outputs.DEPLOY_COLOR }}
          timezone: Europe/Paris
          # view-commit-changes: true
          # view-workflow-run: true
          # view-pull-request: false
          custom-facts: |
            - name: Status
              value: ${{ steps.deploy-status-style.outputs.DEPLOY_STATUS }}
            - name: Cluster
              value: ${{ steps.string.outputs.uppercase }}
            - name: Service
              value: ${{ matrix.service }}
            - name: üìñ Commit
              value: "[${{ steps.git-commit.outputs.COMMIT_MESSAGE }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
            - name: üìï Branche
              value: "[${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref }})"
            - name: üîß CI/CD
              value: "[Run #${{ github.run_attempt }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            - name: üìã Jira
              value: "${{ steps.teams-notification-content.outputs.CUSTOM_FACT_JIRA }}"
          custom-actions: | # Max 5 actions
            - text: üîó priv√©
              url: "http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs"
            - text: üîó public
              url: "https://${{ matrix.service }}.${{ inputs.CLUSTER }}.sonergia.org"
            - text: üêï Datadog
              url: "https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}"
            - text: üêñ Mailhog
              url: "http://mailhog.${{ inputs.CLUSTER }}.ecs:8025"

      - name: Exit if deploy failed
        if: always()
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          if [ ${DEPLOY_STATUS} != 'success' ]; then
            exit 1
          fi
