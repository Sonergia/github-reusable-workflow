name: terraform deploy lambda workflow

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      LAMBDA_NAMESPACE:
        required: true
        type: string
      LAMBDAS:
        description: "Lambdas list for matrix strategy"
        required: true
        type: string
      SHA_SHORT:
        description: "Git commit SHA short (without 'sha-' prefix)"
        required: true
        type: string
      JIRA_CODE:
        required: false
        type: string
        default: ''
      NOTIFICATIONS_TEAMS:  # booleans must be treated as string
        required: false
        type: string
        default: 'true'
      NOTIFICATIONS_JIRA:
        required: false
        type: string
        default: 'true'
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
      GH_TF_SSH_KEY:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      DEPLOY_STATUS:
        description: "DEPLOY_STATUS might be: error, failure, success"
        value: ${{ jobs.tf-lambda.outputs.DEPLOY_STATUS }}

concurrency:
  group: deploy-lambda-${{ github.workflow }}-${{ inputs.ENVIRONMENT }}
  cancel-in-progress: false

jobs:
  tf-lambda:
    name: Tf '${{ matrix.lambda }}' on environment '${{ inputs.ENVIRONMENT }}'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # For deployment-action and checkout
    permissions:
      contents: read
      deployments: write

    strategy:
      matrix:
        lambda: ${{ fromJson(inputs.LAMBDAS) }}

    steps:
      - name: Check required inputs
        run: |
          if [ -z "${{ inputs.AWS_DEFAULT_REGION }}" ]; then
            echo "::error title=Deploy common::Input AWS_DEFAULT_REGION is empty"
            exit 1
          fi
          if [ -z "${{ inputs.ENVIRONMENT }}" ]; then
            echo "::error title=Deploy common::Input ENVIRONMENT is empty"
            exit 1
          fi
          if [ -z "${{ inputs.LAMBDAS }}" ]; then
            echo "::error title=Deploy common::Input LAMBDAS is empty"
            exit 1
          fi
          if [ -z "${{ inputs.SHA_SHORT }}" ]; then
            echo "::error title=Deploy common::Input SHA_SHORT is empty"
            exit 1
          fi

      - uses: actions/checkout@v3
        if: always()

      # Get commit message before checking out reusable workflows
      - name: Git output commit message
        id: git-commit
        if: always()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> ${GITHUB_OUTPUT}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        if: always()
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        # must use always() here for tf-apply-lambda dependancy
        if: always()
        with:
          terraform_version: ~1.3.0
          terraform_wrapper: false # Fix "/usr/bin/env: ‘node’: No such file or directory"

      - name: Terraform init lambda '${{ matrix.lambda }}' on environment '${{ inputs.ENVIRONMENT }}' configuration
        id: tf-init
        # must use always() here for tf-apply-lambda dependancy
        if: always()
        env:
          GIT_SSH_COMMAND: "echo '${{ secrets.GH_TF_SSH_KEY }}' > id_rsa
            && ssh-keyscan github.com > known_hosts
            && chmod 600 id_rsa known_hosts
            && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
        working-directory: ./.terraform/lambdas
        run: |
          cd ${{ matrix.lambda }}
          terraform version | head -1
          terraform init -reconfigure -upgrade -backend-config=backend-${{ inputs.ENVIRONMENT }}.conf

      - name: Terraform validate
        id: tf-validate
        # must use always() here for tf-apply-lambda dependancy
        if: |
          always() &&
          steps.tf-init.conclusion != 'failure'
        working-directory: ./.terraform/lambdas
        run: |
          # To activate debug logs
          # export TF_LOG=debug

          cd ${{ matrix.lambda }}
          terraform validate -no-color

      - name: Terraform apply lambda '${{ matrix.lambda }}' on environment '${{ inputs.ENVIRONMENT }}'
        id: tf-apply-lambda
        # using always() here will avoid cancellation in progress
        if: |
          always() &&
          steps.tf-validate.conclusion != 'failure'
        working-directory: ./.terraform/lambdas
        run: |
          cd ${{ matrix.lambda }}

          echo "::notice title=Deploy lambda::Terraform is deploying '${{ matrix.lambda }}' on environment '${{ inputs.ENVIRONMENT }}'"

          # To activate debug logs
          # export TF_LOG=debug

          terraform apply \
            -auto-approve \
            -var-file terraform-${{ inputs.ENVIRONMENT }}.tfvars

      #--------------------------------------------------------

      - name: Check deploy status
        id: check-deploy-status
        if: always()
        run: |
          if [ "${{ steps.tf-apply-lambda.conclusion}}" == "success" ] || [ "${{ steps.tf-apply-lambda.conclusion}}" == "failure" ]; then
            DEPLOY_STATUS=${{ steps.tf-apply-lambda.conclusion}}
          else
            DEPLOY_STATUS=error
          fi
          echo "DEPLOY_STATUS=${DEPLOY_STATUS}" >> ${GITHUB_OUTPUT}

      - name: Map vars with github environment
        id: map-github-env
        if: always()
        run: |
          # Available env: development, testing, staging, or production
          # See .jira/config.yml for environments mapping with our environments
          GITHUB_ENVIRONMENT=${{ inputs.ENVIRONMENT }}
          echo "GITHUB_ENVIRONMENT=${GITHUB_ENVIRONMENT}" >> ${GITHUB_OUTPUT}

      - name: Change string case function
        id: string
        uses: ASzc/change-string-case-action@v5
        if: always()
        with:
          string: ${{ inputs.ENVIRONMENT }}

      - name: Create GitHub deployment
        id: github-deployment
        uses: chrnorm/deployment-action@v2
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' }}
        with:
          token: ${{ github.token }}
          # error, failure, in_progress, queued, pending, success, (inactive)
          initial-status: ${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          auto-inactive: false
          task: deploy-${{ inputs.ENVIRONMENT }}-${{ inputs.SHA_SHORT }}
          # Use log-url since JIRA does not display environment-url
          # environment-url: http://${{ matrix.lambda }}.${{ inputs.ENVIRONMENT }}.ecs
          log-url: https://${{ inputs.AWS_DEFAULT_REGION }}.console.aws.amazon.com/lambda/home?region=${{ inputs.AWS_DEFAULT_REGION }}#/functions/${{ matrix.lambda }}-${{ inputs.ENVIRONMENT }}?tab=code
          # log-url: https://app.datadoghq.eu/logs?query=service:cloudwatch%20environment:${{ inputs.ENVIRONMENT }}%20%40service:${{ matrix.lambda }}
          environment: ${{ steps.map-github-env.outputs.GITHUB_ENVIRONMENT }}
          # Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future.
          transient-environment: ${{ inputs.ENVIRONMENT != 'prod' }}
          description: ${{ matrix.lambda }} (${{ inputs.SHA_SHORT }}) deployed on environment ${{ inputs.ENVIRONMENT }}

      - name: Deploy status style
        id: deploy-status-style
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          DEPLOY_COLOR=

          if [ "${DEPLOY_STATUS}" == "success" ]; then
            DEPLOY_STATUS="✅ ${DEPLOY_STATUS}"
            DEPLOY_COLOR=2cbe4e
          elif [ "${DEPLOY_STATUS}" == "failure" ]; then
            DEPLOY_STATUS="❗${DEPLOY_STATUS}"
            DEPLOY_COLOR=ffc107
          elif [ "${DEPLOY_STATUS}" == "error" ]; then
            DEPLOY_STATUS="❌ ${DEPLOY_STATUS}"
            DEPLOY_COLOR=cb2431
          fi

          echo "DEPLOY_STATUS=${DEPLOY_STATUS}" >> ${GITHUB_OUTPUT}
          echo "DEPLOY_COLOR=${DEPLOY_COLOR}" >> ${GITHUB_OUTPUT}

      - name: Login JIRA
        uses: atlassian/gajira-login@master
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' && inputs.JIRA_CODE != '' && steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success' }}
        env:
          JIRA_BASE_URL: https://sonergia.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Comment on JIRA issue
        uses: atlassian/gajira-comment@23b9748b2d2ea1c486bd788daed8b4c00fccf362
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' && inputs.JIRA_CODE != '' && steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success' }}
        with:
          issue: ${{ inputs.JIRA_CODE }}
          comment: |
            Ticket déployé sur l'environnement ${{ steps.string.outputs.uppercase }}:
              - [🔗 AWS Lambda](https://${{ inputs.AWS_DEFAULT_REGION }}.console.aws.amazon.com/lambda/home?region=${{ inputs.AWS_DEFAULT_REGION }}#/functions/${{ matrix.lambda }}-${{ inputs.ENVIRONMENT }}?tab=code)

      - name: Teams notification content
        id: teams-notification-content
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        run: |
          if [ ! -z "${{ inputs.JIRA_CODE }}" ]; then
            CUSTOM_FACT_JIRA_RELEASE_NAME=Jira
            CUSTOM_FACT_JIRA_RELEASE="[${{ inputs.JIRA_CODE }}](https://sonergia.atlassian.net/browse/${{ inputs.JIRA_CODE }})"
          else
            CUSTOM_FACT_JIRA_RELEASE_NAME=Release
            CUSTOM_FACT_JIRA_RELEASE="[${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }})"
          fi
          echo "CUSTOM_FACT_JIRA_RELEASE_NAME=${CUSTOM_FACT_JIRA_RELEASE_NAME}" >> ${GITHUB_OUTPUT}
          echo "CUSTOM_FACT_JIRA_RELEASE=${CUSTOM_FACT_JIRA_RELEASE}" >> ${GITHUB_OUTPUT}

      # Notify at the end of workflow
      # You can use markdown: https://support.microsoft.com/en-us/office/use-markdown-formatting-in-teams-4d10bd65-55e2-4b2d-a1f3-2bebdcd2c772
      - name: Notify teams channel
        uses: Sonergia/ms-teams-notification@add-potential-action
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: Déploiement lambda ${{ matrix.lambda }} -> ${{ inputs.ENVIRONMENT }} terminé !
          notification-color: ${{ steps.deploy-status-style.outputs.DEPLOY_COLOR }}
          timezone: Europe/Paris
          # view-commit-changes: true
          # view-workflow-run: true
          # view-pull-request: false
          custom-facts: |
            - name: Status
              value: ${{ steps.deploy-status-style.outputs.DEPLOY_STATUS }}
            - name: Environnement
              value: ${{ steps.string.outputs.uppercase }}
            - name: Lambda
              value: ${{ matrix.lambda }}
            - name: 📖 Commit
              value: "[${{ steps.git-commit.outputs.COMMIT_MESSAGE }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
            - name: 📕 Branche
              value: "[${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref }})"
            - name: 🔧 CI/CD
              value: "[Run #${{ github.run_attempt }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            - name: 📋 ${{ steps.teams-notification-content.outputs.CUSTOM_FACT_JIRA_RELEASE_NAME }}
              value: "${{ steps.teams-notification-content.outputs.CUSTOM_FACT_JIRA_RELEASE }}"
          custom-actions: | # Max 5 actions
            - text: 🔗 AWS Lambda
              url: "https://${{ inputs.AWS_DEFAULT_REGION }}.console.aws.amazon.com/lambda/home?region=${{ inputs.AWS_DEFAULT_REGION }}#/functions/${{ matrix.lambda }}-${{ inputs.ENVIRONMENT }}?tab=code"

      - name: Exit if deploy failed
        if: always()
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          if [ ${DEPLOY_STATUS} != 'success' ]; then
            exit 1
          fi

    outputs:
      DEPLOY_STATUS: ${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
