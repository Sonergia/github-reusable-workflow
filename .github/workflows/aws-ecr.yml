name: AWS ECR

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      SERVICE_NAMESPACE:
        required: true
        type: string
      IMAGE_NAMES:
        required: true
        type: string
      IMAGE_SHA:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      IMAGE_EXISTS:
        description: "Indicate if Docker image already exists in ECR for current git commit SHA"
        value: ${{ jobs.aws-ecr.outputs.IMAGE_EXISTS }}

# concurrency:
#   group: ${{ github.workflow }}-${{ inputs.SERVICE_NAMESPACE }}-${{ inputs.IMAGE_NAME }}-${{ inputs.IMAGE_SHA }}

jobs:
  aws-ecr:
    name: Configure ECR repo ${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.image_name }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image_name: ${{ fromJson(inputs.IMAGE_NAMES) }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Create ECR Registry
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.image_name }}
      #   run: |
      #     aws ecr create-repository \
      #       --repository-name ${ECR_REPOSITORY} \
      #       --region ${AWS_DEFAULT_REGION} || true

      - name: Check if image SHA tag already exists in ECR
        id: check-image-ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.image_name }}
        run: |
          IMAGE_EXISTS=false
          IMAGE_SHA=$(aws ecr list-images \
            --repository-name ${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.image_name }} \
            --filter tagStatus=TAGGED \
            | jq -c '.imageIds[] | select(.imageTag == "${{ inputs.IMAGE_SHA }}")')

          if [ ! -z "${IMAGE_SHA}" ]; then
            IMAGE_EXISTS=true
            echo "::notice title=AWS ECR::Image tag '${{ inputs.IMAGE_SHA }}' already exists in ${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.image_name }}. Build jobs will be skipped."
          fi

          echo "::set-output name=exists::${IMAGE_EXISTS}"

    outputs:
      IMAGE_EXISTS: ${{ steps.check-image-ecr.outputs.exists }}
