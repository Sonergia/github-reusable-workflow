name: Check context (ECR, git...)

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      CLUSTER:
        required: true
        type: string
      SERVICE_NAMESPACE:
        required: true
        type: string
      SERVICES:
        required: true
        type: string
      IMAGE_NAMES:
        required: true
        type: string
      SHA_SHORT:
        description: 'Git commit SHA short (without "sha-" prefix)'
        required: false
        type: string
        default: ''
      NOTIFICATIONS_TEAMS: # booleans must be treated as string
        required: false
        type: string
        default: 'true'
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      SHA_SHORT:
        description: 'Define SHA_SHORT from input or current git commit SHA'
        value: ${{ jobs.check-context.outputs.SHA_SHORT }}
      IMAGE_SHA:
        description: 'Define IMAGE_SHA from input or current git commit SHA'
        value: ${{ jobs.check-context.outputs.IMAGE_SHA }}
      IMAGE_EXISTS:
        description: 'Indicate if Docker image already exists in ECR for current git commit SHA'
        value: ${{ jobs.check-context.outputs.IMAGE_EXISTS }}
      CLUSTER:
        description: "Cluster name to deploy onto (sandbox, test, release, prod)"
        value: ${{ jobs.check-context.outputs.CLUSTER }}
      JIRA_CODE:
        description: 'JIRA ticket code found in branch name'
        value: ${{ jobs.check-context.outputs.JIRA_CODE }}
      IMAGE_TAG:
        description: 'Docker image tag'
        value: ${{ jobs.check-context.outputs.IMAGE_TAG }}
      CREATE_TAG_LATEST:
        description: 'Docker image should be tag as latest'
        value: ${{ jobs.check-context.outputs.CREATE_TAG_LATEST }}

jobs:
  check-context:
    name: Check context
    runs-on: ubuntu-latest
    timeout-minutes: 5

    # strategy:
    #   matrix:
    #     image_name: ${{ fromJson(inputs.IMAGE_NAMES) }}

    steps:
      - uses: actions/checkout@v3
        if: inputs.SHA_SHORT == ''

        # Get commit SHA before checking out reusable workflows
      - name: Git output SHA short
        id: git-sha
        if: always()
        run: |
          if [ "${{ inputs.SHA_SHORT }}" != "" ]; then
            SHA_SHORT=${{ inputs.SHA_SHORT }}
          else
            SHA_SHORT=$(git rev-parse --short HEAD)
          fi

          if [ -z ${SHA_SHORT} ]; then
            echo "::error title=Check GIT SHA::GIT SHA can not be empty"
            exit 1
          fi

          echo "SHA_SHORT=${SHA_SHORT}" >> ${GITHUB_OUTPUT}
          echo "IMAGE_SHA=sha-${SHA_SHORT}" >> ${GITHUB_OUTPUT}

      # Get commit message before checking out reusable workflows
      - name: Git output commit message
        id: git-commit
        if: always()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> ${GITHUB_OUTPUT}

      # Checkout reusable workflow to get bash scripts
      - uses: actions/checkout@v3
        with:
          repository: Sonergia/github-reusable-workflows
          ref: '2.x'
          # ref: 'delivery' # Only when testing ############## /!\ ##############

      # JQ is preinstalled in runner
      # - name: Install packages (jq)
      #   run: |
      #     sudo apt-get -y install jq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if image SHA tag and release tag already exists in ECR, add release tag otherwise
        id: check-image-ecr
        if: inputs.IMAGE_NAMES != '[]'
        run: ./.github/scripts/check-image-ecr.sh ${{ inputs.SERVICE_NAMESPACE }} "${{ join(fromJson(inputs.IMAGE_NAMES), ' ') }}" ${{ steps.git-sha.outputs.IMAGE_SHA }}

      - name: Set context from git and inputs
        id: set-context
        run: |
          ENVIRONMENT="${{ inputs.CLUSTER }}"
          IS_LAMBDA="false"
          IS_LEGACY="false"
          ./.github/scripts/set-context.sh "${ENVIRONMENT}" "${IS_LAMBDA}" "${IS_LEGACY}"

      # Notify at the start of workflow
      - name: Notify teams channel
        if: always() && inputs.NOTIFICATIONS_TEAMS == 'true'
        uses: sonergia/github-reusable-workflows/.github/actions/ms-teams-notification@2.x
        with:
          MS_TEAMS_WEBHOOK_URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          ENVIRONMENT: ${{ steps.set-context.outputs.CLUSTER }}
          SUMMARY: Déploiement service(s) ${{ join(fromJson(inputs.SERVICES), ',') }} -> ${{ steps.set-context.outputs.CLUSTER }} en cours...
          COLOR: 999999
          COMMIT_MESSAGE: ${{ steps.git-commit.outputs.COMMIT_MESSAGE }}
          JIRA_CODE: ${{ steps.set-context.outputs.JIRA_CODE }}
          FACT_STATUS: ⏱ in progress...
          FACT_TYPE_NAME: Service(s)
          FACT_TYPE_VALUE: ${{ join(fromJson(inputs.SERVICES), ',') }}
          ACTION_DATADOG_URL: 'https://app.datadoghq.eu/logs?query=cluster:${{ steps.set-context.outputs.CLUSTER }}%20namespace:${{ inputs.SERVICE_NAMESPACE }}&cols=privatedns,servicename'
          # ACTION_AWS_URL: "https://${{ inputs.AWS_DEFAULT_REGION }}.console.aws.amazon.com/ecs/v2/clusters/${{ inputs.CLUSTER }}/services?region=${{ inputs.AWS_DEFAULT_REGION }}"

      - name: Summary
        if: always()
        run: |
          echo "## Github context" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Event | ref_type | ref_name |" >> $GITHUB_STEP_SUMMARY
          echo "| ----- | -------- | -------- |" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ github.event_name }} | ${{ github.event.ref_type }} | ${{ github.event.ref }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Output values" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Name | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| ---- | ----- |" >> $GITHUB_STEP_SUMMARY
          echo "| CLUSTER | ${{ steps.set-context.outputs.CLUSTER }} |" >> $GITHUB_STEP_SUMMARY
          if [ ${{inputs.IMAGE_NAMES}} != '[]' ]; then
            echo "| CREATE_TAG_LATEST | ${{ steps.set-context.outputs.CREATE_TAG_LATEST }} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| ENVIRONMENT | ${{ steps.set-context.outputs.ENVIRONMENT }} |" >> $GITHUB_STEP_SUMMARY
          if [ ${{inputs.IMAGE_NAMES}} != '[]' ]; then
            echo "| IMAGE_EXISTS | ${{ steps.check-image-ecr.outputs.IMAGE_EXISTS }} |" >> $GITHUB_STEP_SUMMARY
            echo "| IMAGE_SHA | ${{ steps.git-sha.outputs.IMAGE_SHA }} |" >> $GITHUB_STEP_SUMMARY
            echo "| IMAGE_TAG | ${{ steps.set-context.outputs.IMAGE_TAG }} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| JIRA_CODE | ${{ steps.set-context.outputs.JIRA_CODE }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SHA_SHORT | ${{ steps.git-sha.outputs.SHA_SHORT }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

    outputs:
      SHA_SHORT: ${{ steps.git-sha.outputs.SHA_SHORT }}
      IMAGE_SHA: ${{ steps.git-sha.outputs.IMAGE_SHA }}
      IMAGE_EXISTS: ${{ steps.check-image-ecr.outputs.IMAGE_EXISTS }}
      CLUSTER: ${{ steps.set-context.outputs.CLUSTER }}
      JIRA_CODE: ${{ steps.set-context.outputs.JIRA_CODE }}
      IMAGE_TAG: ${{ steps.set-context.outputs.IMAGE_TAG }}
      CREATE_TAG_LATEST: ${{ steps.set-context.outputs.CREATE_TAG_LATEST }}
