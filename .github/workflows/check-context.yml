name: Check context (ECR, git...)

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      CLUSTER:
        required: true
        type: string
      SERVICE_NAMESPACE:
        required: true
        type: string
      SERVICES:
        required: true
        type: string
      IMAGE_NAMES:
        required: true
        type: string
      SHA_SHORT:
        description: "Git commit SHA short (without 'sha-' prefix)"
        required: false
        type: string
        default: ''
      NOTIFICATIONS_TEAMS:  # booleans must be treated as string
        required: false
        type: string
        default: 'true'
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      SHA_SHORT:
        description: "Define SHA_SHORT from input or current git commit SHA"
        value: ${{ jobs.check-context.outputs.SHA_SHORT }}
      IMAGE_SHA:
        description: "Define IMAGE_SHA from input or current git commit SHA"
        value: ${{ jobs.check-context.outputs.IMAGE_SHA }}
      IMAGE_EXISTS:
        description: "Indicate if Docker image already exists in ECR for current git commit SHA"
        value: ${{ jobs.check-context.outputs.IMAGE_EXISTS }}
      CLUSTER:
        description: "Cluster name to deploy onto (test, release, prod)"
        value: ${{ jobs.check-context.outputs.CLUSTER }}
      JIRA_CODE:
        description: "JIRA ticket code found in branch name"
        value: ${{ jobs.check-context.outputs.JIRA_CODE }}
      IMAGE_TAG:
        description: "Docker image tag"
        value: ${{ jobs.check-context.outputs.IMAGE_TAG }}
      CREATE_TAG_LATEST:
        description: "Docker image should be tag as latest"
        value: ${{ jobs.check-context.outputs.CREATE_TAG_LATEST }}

# Env vars are used in bash scripts
env:
  CLUSTER: ${{ inputs.CLUSTER }}

jobs:
  check-context:
    name: Check context
    runs-on: ubuntu-latest
    timeout-minutes: 1

    # strategy:
    #   matrix:
    #     image_name: ${{ fromJson(inputs.IMAGE_NAMES) }}

    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.SHA_SHORT == '' }}

        # Get commit SHA before checking out reusable workflows
      - name: Git output SHA short
        id: git-sha
        if: always()
        run: |
          if [ "${{ inputs.SHA_SHORT }}" != "" ]; then
            SHA_SHORT=${{ inputs.SHA_SHORT }}
          else
            SHA_SHORT=$(git rev-parse --short HEAD)
          fi

          if [ -z ${SHA_SHORT} ]; then
            echo "::error title=Check docker image::Image SHA can not be empty"
            exit 1
          fi

          echo "::notice title=Check docker image::GIT SHA output value is '${SHA_SHORT}'"
          echo "SHA_SHORT=${SHA_SHORT}" >> ${GITHUB_OUTPUT}
          echo "IMAGE_SHA=sha-${SHA_SHORT}" >> ${GITHUB_OUTPUT}

      # Get commit message before checking out reusable workflows
      - name: Git output commit message
        id: git-commit
        if: always()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "COMMIT_MESSAGE=\"${COMMIT_MESSAGE}\"" >> ${GITHUB_OUTPUT}

      # Checkout reusable workflow to get bash scripts
      - uses: actions/checkout@v3
        with:
          repository: Sonergia/github-reusable-workflows
          ref: '2.x'
          # ref: 'delivery' # Only when testing ############## /!\ ##############

      - name: Install packages (jq)
        run: |
          sudo apt-get -y install jq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if image SHA tag and release tag already exists in ECR, add release tag otherwise
        id: check-image-ecr
        run: ./.github/scripts/check-image-ecr.sh ${{ inputs.SERVICE_NAMESPACE }} "${{ join(fromJson(inputs.IMAGE_NAMES), ' ') }}" ${{ steps.git-sha.outputs.IMAGE_SHA }}

      - name: Set context from git and inputs
        id: set-context
        run: ./.github/scripts/set-context.sh ${{ inputs.CLUSTER }}

      - name: Change string case function
        id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ steps.set-context.outputs.CLUSTER }}

      # Notify at the start of workflow
      - name: Notify teams channel
        uses: djthornton1212/ms-teams-notification@e658184be2a664fae7a9220bb38eb97b0a5946a6
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: Déploiement en cours...
          notification-color: 999999
          timezone: Europe/Paris
          view-commit-changes: true
          view-workflow-run: true
          view-pull-request: false
          custom-facts: |
            - name: Status
              value: ⏱ in progress...
            - name: Cluster
              value: ${{ steps.string.outputs.uppercase }}
            - name: Service(s)
              value: ${{ join(fromJson(inputs.SERVICES), ',') }}
            - name: Branche
              value: ${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref }}
            - name: Commit
              value: ${{ steps.git-commit.outputs.COMMIT_MESSAGE }}
            - name: Url du Jira
              value: https://sonergia.atlassian.net/browse/${{ steps.set-context.outputs.JIRA_CODE }}

    outputs:
      SHA_SHORT: ${{ steps.git-sha.outputs.SHA_SHORT }}
      IMAGE_SHA: ${{ steps.git-sha.outputs.IMAGE_SHA }}
      IMAGE_EXISTS: ${{ steps.check-image-ecr.outputs.IMAGE_EXISTS }}
      CLUSTER: ${{ steps.set-context.outputs.CLUSTER }}
      JIRA_CODE: ${{ steps.set-context.outputs.JIRA_CODE }}
      IMAGE_TAG: ${{ steps.set-context.outputs.IMAGE_TAG }}
      CREATE_TAG_LATEST: ${{ steps.set-context.outputs.CREATE_TAG_LATEST }}
