name: Check lambda context (git...)

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      LAMBDA_NAMESPACE:
        required: true
        type: string
      LAMBDAS:
        required: true
        type: string
      IS_LEGACY:
        description: "Indicates if target infra is legacy EC2 (DEVELOPMENT/NOTPROD/PROD envs)"
        required: false
        type: string
        default: 'false'
      SHA_SHORT:
        description: "Git commit SHA short (without 'sha-' prefix)"
        required: false
        type: string
        default: ''
      NOTIFICATIONS_TEAMS:  # booleans must be treated as string
        required: false
        type: string
        default: 'true'
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      SHA_SHORT:
        description: "Define SHA_SHORT from input or current git commit SHA"
        value: ${{ jobs.check-context.outputs.SHA_SHORT }}
      ENVIRONMENT:
        description: "Cluster name to deploy onto (test, release, prod)"
        value: ${{ jobs.check-context.outputs.ENVIRONMENT }}
      JIRA_CODE:
        description: "JIRA ticket code found in branch name"
        value: ${{ jobs.check-context.outputs.JIRA_CODE }}

jobs:
  check-context:
    name: Check context
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.SHA_SHORT == '' }}

        # Get commit SHA before checking out reusable workflows
      - name: Git output SHA short
        id: git-sha
        if: always()
        run: |
          if [ "${{ inputs.SHA_SHORT }}" != "" ]; then
            SHA_SHORT=${{ inputs.SHA_SHORT }}
          else
            SHA_SHORT=$(git rev-parse --short HEAD)
          fi

          if [ -z ${SHA_SHORT} ]; then
            echo "::error title=Check GIT SHA::GIT SHA can not be empty"
            exit 1
          fi

          echo "::notice title=Check GIT SHA::GIT SHA output value is '${SHA_SHORT}'"
          echo "SHA_SHORT=${SHA_SHORT}" >> ${GITHUB_OUTPUT}

      # Get commit message before checking out reusable workflows
      - name: Git output commit message
        id: git-commit
        if: always()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> ${GITHUB_OUTPUT}

      # Checkout reusable workflow to get bash scripts
      - uses: actions/checkout@v3
        with:
          repository: Sonergia/github-reusable-workflows
          ref: '2.x'
          # ref: 'delivery' # Only when testing ############## /!\ ##############

      - name: Set context from git and inputs
        id: set-context
        run: |
          ENVIRONMENT="${{ inputs.ENVIRONMENT }}"
          IS_LAMBDA="true"
          IS_LEGACY="${{ inputs.IS_LEGACY }}"
          ./.github/scripts/set-context.sh "${ENVIRONMENT}" "${IS_LAMBDA}" "${IS_LEGACY}"

      - name: Change string case function
        id: string
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ steps.set-context.outputs.ENVIRONMENT }}

      - name: Teams notification content
        id: teams-notification-content
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        run: |
          if [ ! -z "${{ steps.set-context.outputs.JIRA_CODE }}" ]; then
            CUSTOM_FACT_JIRA_RELEASE_NAME=Jira
            CUSTOM_FACT_JIRA_RELEASE="[${{ steps.set-context.outputs.JIRA_CODE }}](https://sonergia.atlassian.net/browse/${{ steps.set-context.outputs.JIRA_CODE }})"
          else
            CUSTOM_FACT_JIRA_RELEASE_NAME=Release
            CUSTOM_FACT_JIRA_RELEASE="[${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }})"
          fi
          echo "CUSTOM_FACT_JIRA_RELEASE_NAME=${CUSTOM_FACT_JIRA_RELEASE_NAME}" >> ${GITHUB_OUTPUT}
          echo "CUSTOM_FACT_JIRA_RELEASE=${CUSTOM_FACT_JIRA_RELEASE}" >> ${GITHUB_OUTPUT}

      # Notify at the start of workflow
      - name: Notify teams channel
        uses: Sonergia/ms-teams-notification@add-potential-action
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: D√©ploiement lambda(s) ${{ join(fromJson(inputs.LAMBDAS), ',') }} -> ${{ steps.set-context.outputs.ENVIRONMENT }} en cours...
          notification-color: 999999
          timezone: Europe/Paris
          # view-commit-changes: true
          # view-workflow-run: true
          # view-pull-request: false
          custom-facts: |
            - name: Status
              value: ‚è± in progress...
            - name: Environnement
              value: ${{ steps.string.outputs.uppercase }}
            - name: Lambda(s)
              value: ${{ join(fromJson(inputs.LAMBDAS), ',') }}
            - name: üìñ Commit
              value: "[${{ steps.git-commit.outputs.COMMIT_MESSAGE }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
            - name: üìï Branche
              value: "[${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref }})"
            - name: üîß CI/CD
              value: "[Run #${{ github.run_attempt }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            - name: üìã ${{ steps.teams-notification-content.outputs.CUSTOM_FACT_JIRA_RELEASE_NAME }}
              value: "${{ steps.teams-notification-content.outputs.CUSTOM_FACT_JIRA_RELEASE }}"
          # custom-actions: | # Max 5 actions
          #   - text: üêï Datadog
          #     url: "https://app.datadoghq.eu/logs?query=env:${{ steps.set-context.outputs.ENVIRONMENT }}%20namespace:${{ inputs.LAMBDA_NAMESPACE }}&cols=privatedns,servicename"

    outputs:
      SHA_SHORT: ${{ steps.git-sha.outputs.SHA_SHORT }}
      ENVIRONMENT: ${{ steps.set-context.outputs.ENVIRONMENT }}
      JIRA_CODE: ${{ steps.set-context.outputs.JIRA_CODE }}
