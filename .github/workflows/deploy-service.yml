name: terraform deploy service workflow

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      CLUSTER:
        required: true
        type: string
      SERVICES:
        required: true
        type: string
      IMAGE_SHA:
        required: false
        type: string
        default: null
      IMAGE_TAG:
        required: false
        type: string
        default: null
      JIRA_CODE:
        required: false
        type: string
        default: ''
      # FORCE_DEPLOYMENT is not bool because output transforms it in text
      FORCE_DEPLOYMENT:
        required: false
        type: string
        default: 'false'
      DNS_PREFIX:
        required: false
        type: string
        default: null
      NOTIFICATIONS_TEAMS:  # booleans must be treated as string
        required: false
        type: string
        default: 'true'
      NOTIFICATIONS_JIRA:
        required: false
        type: string
        default: 'true'
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
      GH_TF_SSH_KEY:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      DEPLOY_STATUS:
        description: "DEPLOY_STATUS might be: error, failure, success"
        value: ${{ jobs.monitor-deployment.outputs.DEPLOY_STATUS }}

concurrency:
  group: ${{ github.workflow }}-${{ inputs.CLUSTER }}
  cancel-in-progress: false

jobs:
  tf-service:
    name: Tf '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'
    runs-on: [self-hosted, "${{ inputs.CLUSTER }}"]
    timeout-minutes: 20

    # For deployment-action and checkout
    permissions:
      contents: read
      deployments: write

    strategy:
      matrix:
        service: ${{ fromJson(inputs.SERVICES) }}

    steps:
      - uses: actions/checkout@v3

      - name: Check required inputs
        run: |
          # Check that at least IMAGE_TAG is provided
          if [ -z "${{ inputs.IMAGE_SHA }}" ]; then
            if [ -z "${{ inputs.IMAGE_TAG }}" ]; then
              echo "::error title=Deploy service::Input error: IMAGE_SHA and IMAGE_TAG can not be both empty ('${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}')"
              exit 1
            fi
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          terraform_wrapper: false # Fix "/usr/bin/env: ‘node’: No such file or directory"

      - name: Terraform init service '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}' configuration
        env:
          GIT_SSH_COMMAND: "echo '${{ secrets.GH_TF_SSH_KEY }}' > id_rsa
            && ssh-keyscan github.com > known_hosts
            && chmod 600 id_rsa known_hosts
            && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}
          terraform init -reconfigure -upgrade -backend-config=backend-${{ inputs.CLUSTER }}.conf

      - name: Terraform validate
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}
          terraform validate -no-color

      - name: Terraform apply service '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'
        id: tf-apply-service
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}

          DOCKER_IMAGE_TAG=${{ inputs.IMAGE_SHA }}

          if [ -z "${{ inputs.IMAGE_SHA }}" ]; then
            DOCKER_IMAGE_TAG=${{ inputs.IMAGE_TAG }}
          fi

          echo "::debug title=Deploy service::Docker image tag is ${DOCKER_IMAGE_TAG}"

          EXTRA_PARAMS=

          if [ "${{ inputs.FORCE_DEPLOYMENT }}" == "true" ]; then
            EXTRA_PARAMS="${EXTRA_PARAMS} -replace=module.${{ matrix.service }}-service.aws_ecs_task_definition.task"
            echo "::debug title=Deploy service::Force deployment has been set"
          fi

          if [ ! -z "${{ env.DNS_PREFIX }}" ]; then
            EXTRA_PARAMS="${EXTRA_PARAMS} -var "dns_prefix=${{ env.DNS_PREFIX }}""
            echo "::debug title=Deploy service::A dns prefix has been set"
          fi

          echo "::notice title=Deploy service::Terraform is deploying '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'"

          terraform apply \
            -auto-approve \
            -var-file terraform-${{ inputs.CLUSTER }}.tfvars \
            -var "image_tag=${DOCKER_IMAGE_TAG}" \
            -var "use_bastion_ssh_tunnel=false" \
            ${FORCE_DEPLOY_PARAM}

      #--------------------------------------------------------

      # Checkout reusable workflow to get bash scripts
      - uses: actions/checkout@v3
        with:
          repository: Sonergia/github-reusable-workflows
          ref: 'delivery' # Only when testing ############## /!\ ##############

      - name: Monitor deployment
        id: monitor-deployment
        # if: ${{ steps.tf-apply-service.conclusion != 'failure' }}
        run: ./.github/scripts/monitor-deployment.sh ${{ inputs.CLUSTER }} ${{ matrix.service }}

      - name: Check deploy status
        id: check-deploy-status
        if: always()
        run: |
          DEPLOY_STATUS=${{ steps.monitor-deployment.outputs.DEPLOY_STATUS }}

          if [ -z "${DEPLOY_STATUS}" ]; then
            DEPLOY_STATUS=error
          fi

          echo "::set-output name=DEPLOY_STATUS::${DEPLOY_STATUS}"

      - name: Map vars with github environment
        id: map-github-env
        if: always()
        run: |
          # Available env: development, testing, staging, or production
          GITHUB_ENVIRONMENT=${{ inputs.CLUSTER }}

          if [ "${{ inputs.CLUSTER }}" == "release" ]; then
            GITHUB_ENVIRONMENT="staging"
          fi

          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")

          echo "::set-output name=GITHUB_ENVIRONMENT::${GITHUB_ENVIRONMENT}"
          echo "::set-output name=COMMIT_MESSAGE::${COMMIT_MESSAGE}"

      - name: Change string case function
        id: string
        uses: ASzc/change-string-case-action@v2
        if: always()
        with:
          string: ${{ inputs.CLUSTER }}

      - name: Create GitHub deployment
        id: github-deployment
        uses: chrnorm/deployment-action@v2
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' }}
        with:
          token: ${{ github.token }}
          # error, failure, in_progress, queued, pending, success, (inactive)
          initial-status: ${{ steps.map-github-env.outputs.DEPLOY_STATUS }}
          auto-inactive: false
          task: deploy-${{ inputs.CLUSTER }}-${{ inputs.IMAGE_SHA }}
          # Use log-url since JIRA does not display environment-url
          # environment-url: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
          log-url: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
          # log-url: https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}
          environment: ${{ steps.map-github-env.outputs.GITHUB_ENVIRONMENT }}
          # Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future.
          transient-environment: ${{ inputs.CLUSTER != 'prod' }}
          description: ${{ matrix.service }} (${{ inputs.IMAGE_SHA }} / ${{ inputs.IMAGE_TAG }}) deployed on cluster ${{ inputs.CLUSTER }}

      - name: Login JIRA
        uses: atlassian/gajira-login@master
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' && inputs.JIRA_CODE != '' && steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success' }}
        env:
          JIRA_BASE_URL: https://sonergia.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Comment on JIRA issue
        uses: atlassian/gajira-comment@23b9748b2d2ea1c486bd788daed8b4c00fccf362
        if: ${{ always() && inputs.NOTIFICATIONS_JIRA == 'true' && inputs.JIRA_CODE != '' && steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success' }}
        with:
          issue: ${{ inputs.JIRA_CODE }}
          comment: |
            Ticket déployé sur le cluster ${{ steps.string.outputs.uppercase }} (cf Releases):
              - Url du service: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
              - Logs du service: https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}

      - name: Deploy status style
        id: deploy-status-style
        if: always()
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          DEPLOY_COLOR=

          if [ "${DEPLOY_STATUS}" == "success" ]; then
            DEPLOY_STATUS="✅ ${DEPLOY_STATUS}"
            DEPLOY_COLOR=2cbe4e
          elif [ "${DEPLOY_STATUS}" == "failure" ]; then
            DEPLOY_STATUS="⚠️ ${DEPLOY_STATUS}"
            DEPLOY_COLOR=ffc107
          elif [ "${DEPLOY_STATUS}" == "error" ]; then
            DEPLOY_STATUS="❌ ${DEPLOY_STATUS}"
            DEPLOY_COLOR=cb2431
          fi

          echo "::set-output name=DEPLOY_STATUS::${DEPLOY_STATUS}"
          echo "::set-output name=DEPLOY_COLOR::${DEPLOY_COLOR}"

      # Notify at the end of workflow
      - name: Notify teams channel
        uses: djthornton1212/ms-teams-notification@e658184be2a664fae7a9220bb38eb97b0a5946a6
        if: ${{ always() && inputs.NOTIFICATIONS_TEAMS == 'true' }}
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: Déploiement terminé !
          notification-color: ${{ steps.deploy-status-style.outputs.DEPLOY_COLOR }}
          timezone: Europe/Paris
          view-commit-changes: true
          view-workflow-run: true
          view-pull-request: false
          custom-facts: |
            - name: Status
              value: ${{ steps.deploy-status-style.outputs.DEPLOY_STATUS }}
            - name: Cluster
              value: ${{ steps.string.outputs.uppercase }}
            - name: Service
              value: ${{ matrix.service }}
            - name: Branche
              value: ${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref }}
            - name: Commit
              value: ${{ steps.map-github-env.outputs.COMMIT_MESSAGE }}
            - name: Url du Jira
              value: https://sonergia.atlassian.net/browse/${{ inputs.JIRA_CODE }}
            - name: Url du service
              value: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
            - name: Logs du service
              value: https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}
          # custom-actions: |
          #   - name: Url du service
          #     value: "http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs"
          #   - name: Logs du service
          #     value: "https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}"

      - name: Exit if deploy failed
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          if [ ${DEPLOY_STATUS} != 'success' ]; then
            exit 1
          fi

    outputs:
      DEPLOY_STATUS: ${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
