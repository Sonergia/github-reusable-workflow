name: ♻️ Terraform deploy service workflow

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      CLUSTER:
        required: true
        type: string
      SERVICE_NAMESPACE:
        required: true
        type: string
      SERVICES:
        required: true
        type: string
      IMAGE_SHA:
        required: false
        type: string
        default: null
      IMAGE_TAG:
        required: false
        type: string
        default: null
      IMAGE_EXISTS:   # booleans must be treated as string
        required: true
        type: string
      BUILD_DOCKER_RESULT:  # Possible values are success, failure, cancelled, or skipped
        required: true
        type: string
      # FORCE_DEPLOYMENT is not bool because output transforms it in text
      FORCE_DEPLOYMENT:
        required: false
        type: string
        default: 'false'
      DNS_PREFIX:
        required: false
        type: string
        default: ''
      JIRA_CODE:
        required: false
        type: string
        default: ''
      NOTIFICATIONS_TEAMS:  # booleans must be treated as string
        required: false
        type: string
        default: 'true'
      NOTIFICATIONS_JIRA:
        required: false
        type: string
        default: 'true'
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
      GH_TF_SSH_KEY:
        required: true
      MS_TEAMS_WEBHOOK_URI:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true
    # Map the workflow outputs to job outputs
    outputs:
      DEPLOY_STATUS:
        description: "DEPLOY_STATUS might be: error, failure, success"
        value: ${{ jobs.tf-service.outputs.DEPLOY_STATUS }}

concurrency:
  group: deploy-service-${{ github.workflow }}-${{ inputs.CLUSTER }}
  cancel-in-progress: false

jobs:
  tf-service:
    name: Tf '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'
    runs-on: [self-hosted, "${{ inputs.CLUSTER }}"]
    timeout-minutes: 45

    # For deployment-action and checkout
    permissions:
      contents: read
      deployments: write

    strategy:
      matrix:
        service: ${{ fromJson(inputs.SERVICES) }}

    steps:
      - name: Check required inputs
        run: |
          if [ -z "${{ inputs.AWS_DEFAULT_REGION }}" ]; then
            echo "::error title=Deploy common::Input AWS_DEFAULT_REGION is empty"
            exit 1
          fi
          if [ -z "${{ inputs.CLUSTER }}" ]; then
            echo "::error title=Deploy common::Input CLUSTER is empty"
            exit 1
          fi
          if [ -z "${{ inputs.SERVICES }}" ]; then
            echo "::error title=Deploy common::Input SERVICES is empty"
            exit 1
          fi
          # Check that at least IMAGE_TAG is provided
          if [ -z "${{ inputs.IMAGE_SHA }}" ]; then
            if [ -z "${{ inputs.IMAGE_TAG }}" ]; then
              echo "::error title=Deploy service::Input error: IMAGE_SHA and IMAGE_TAG can not be both empty ('${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}')"
              exit 1
            fi
          fi

      - uses: actions/checkout@v3
        if: always()

      # Get commit message before checking out reusable workflows
      - name: Git output commit message
        id: git-commit
        if: always()
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> ${GITHUB_OUTPUT}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        if: |
          always() &&
          (
            (inputs.IMAGE_EXISTS == 'false' && inputs.BUILD_DOCKER_RESULT == 'success') ||
            (inputs.IMAGE_EXISTS == 'true' && inputs.BUILD_DOCKER_RESULT == 'skipped')
          )
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      # Deprecated: pre installed in runner
      # - name: Install packages for Terraform (mysql/psql clients)
      #   # must use always() here for tf-apply-service dependancy
      #   if: |
      #     always() &&
      #     (
      #       (inputs.IMAGE_EXISTS == 'false' && inputs.BUILD_DOCKER_RESULT == 'success') ||
      #       (inputs.IMAGE_EXISTS == 'true' && inputs.BUILD_DOCKER_RESULT == 'skipped')
      #     )
      #   run: |
      #     sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
      #     wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
      #     sudo apt-get update
      #     sudo apt-get install -y \
      #       postgresql-client-14 \
      #       mysql-client

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        # must use always() here for tf-apply-service dependancy
        if: |
          always() &&
          (
            (inputs.IMAGE_EXISTS == 'false' && inputs.BUILD_DOCKER_RESULT == 'success') ||
            (inputs.IMAGE_EXISTS == 'true' && inputs.BUILD_DOCKER_RESULT == 'skipped')
          )
        with:
          terraform_version: ~1.3.0
          terraform_wrapper: false # Fix "/usr/bin/env: ‘node’: No such file or directory"

      - name: Terraform init service '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}' configuration
        id: tf-init
        # must use always() here for tf-apply-service dependancy
        if: |
          always() &&
          (
            (inputs.IMAGE_EXISTS == 'false' && inputs.BUILD_DOCKER_RESULT == 'success') ||
            (inputs.IMAGE_EXISTS == 'true' && inputs.BUILD_DOCKER_RESULT == 'skipped')
          )
        env:
          GIT_SSH_COMMAND: "echo '${{ secrets.GH_TF_SSH_KEY }}' > id_rsa
            && ssh-keyscan github.com > known_hosts
            && chmod 600 id_rsa known_hosts
            && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}
          terraform version | head -1
          terraform init -reconfigure -upgrade -backend-config=backend-${{ inputs.CLUSTER }}.conf

      - name: Terraform validate
        id: tf-validate
        # must use always() here for tf-apply-service dependancy
        if: |
          always() &&
          steps.tf-init.conclusion != 'failure' &&
          (
            (inputs.IMAGE_EXISTS == 'false' && inputs.BUILD_DOCKER_RESULT == 'success') ||
            (inputs.IMAGE_EXISTS == 'true' && inputs.BUILD_DOCKER_RESULT == 'skipped')
          )
        working-directory: ./.terraform/services
        run: |
          # To activate debug logs
          # export TF_LOG=debug

          cd ${{ matrix.service }}
          terraform validate -no-color

      - name: Terraform apply service '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'
        id: tf-apply-service
        # using always() here will avoid cancellation in progress
        if: |
          always() &&
          steps.tf-validate.conclusion != 'failure' &&
          (
            (inputs.IMAGE_EXISTS == 'false' && inputs.BUILD_DOCKER_RESULT == 'success') ||
            (inputs.IMAGE_EXISTS == 'true' && inputs.BUILD_DOCKER_RESULT == 'skipped')
          )
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}

          DOCKER_IMAGE_TAG=${{ inputs.IMAGE_SHA }}

          if [ -z "${{ inputs.IMAGE_SHA }}" ]; then
            DOCKER_IMAGE_TAG=${{ inputs.IMAGE_TAG }}
          fi

          echo "::debug title=Deploy service::Docker image tag is ${DOCKER_IMAGE_TAG}"

          FORCE_DEPLOYMENT=
          if [ "${{ inputs.FORCE_DEPLOYMENT }}" == "true" ]; then
            FORCE_DEPLOYMENT="-replace=module.${{ matrix.service }}-service.aws_ecs_task_definition.task"
            echo "::debug title=Deploy service::Force deployment has been set"
          fi

          WITH_DNS_PREFIX=
          if [ ! -z "${{ inputs.DNS_PREFIX }}" ]; then
            WITH_DNS_PREFIX="-var=\"dns_prefix=${{ inputs.DNS_PREFIX }}\""
            echo "::debug title=Deploy service::A dns prefix has been set"
          fi

          echo "::notice title=Deploy service::Terraform is deploying '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'"

          # To activate debug logs
          # export TF_LOG=debug

          terraform apply \
            -auto-approve \
            -var-file=terraform-${{ inputs.CLUSTER }}.tfvars \
            -var="image_tag=${DOCKER_IMAGE_TAG}" \
            -var="use_bastion_ssh_tunnel=false" \
            ${FORCE_DEPLOYMENT} ${WITH_DNS_PREFIX}

      - name: Terraform output
        id: tf-output
        if: always()
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}

          # Handle outputs
          TF_OUTPUTS=$(terraform output -json | jq -c)
          TRAFFIC_PORT=$(echo "${TF_OUTPUTS}" | jq --raw-output '.traffic_port.value')
          PRIVATE_URL=$(echo "${TF_OUTPUTS}" | jq --raw-output '.private_url.value')
          PUBLIC_URL=$(echo "${TF_OUTPUTS}" | jq --raw-output '.public_url.value')

          # Check case when outputs are not implemented (PRIVATE_URL output should always be set)
          # JQ return null if json key is not found
          if [ "${PRIVATE_URL}" == "null" ]; then
            # PUBLIC_URL resource might not exist but we set it anyway
            PUBLIC_URL="https://${{ matrix.service }}.${{ inputs.CLUSTER }}.sonergia.org"
            PRIVATE_URL="http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs"
            TRAFFIC_PORT=80
          fi

          if [ "${TRAFFIC_PORT}" != "80" ]; then
            PRIVATE_URL="${PRIVATE_URL}:${TRAFFIC_PORT}"
          fi

          echo "::notice title=Deploy service::PUBLIC_URL output value is '${PUBLIC_URL}'"
          echo "::notice title=Deploy service::PRIVATE_URL output value is '${PRIVATE_URL}'"
          echo "PRIVATE_URL=${PRIVATE_URL}" >> ${GITHUB_OUTPUT}
          echo "PUBLIC_URL=${PUBLIC_URL}" >> ${GITHUB_OUTPUT}

      #--------------------------------------------------------

      # Checkout reusable workflow to get bash scripts
      - uses: actions/checkout@v3
        with:
          repository: Sonergia/github-reusable-workflows
          ref: '2.x'
          # ref: 'delivery' # Only when testing ############## /!\ ##############

      - name: Monitor deployment
        id: monitor-deployment
        # if: steps.tf-apply-service.conclusion != 'failure'
        uses: sonergia/github-reusable-workflows/.github/actions/monitor-deployment@2.x
        with:
          CLUSTER: ${{ inputs.CLUSTER }}
          SERVICE: ${{ matrix.service }}

      #--------------------------------------------------------

      # Formerly deploy-status workflow that had to be merge to match matrix outputs
      # cf https://sonergia.atlassian.net/browse/DEVOPS-177

      - name: Check deploy status
        id: check-deploy-status
        if: always()
        run: |
          DEPLOY_STATUS=${{ steps.monitor-deployment.outputs.DEPLOY_STATUS }}
          if [ -z "${DEPLOY_STATUS}" ]; then
            echo "::warning title=Deploy status::DEPLOY_STATUS input is empty, defaults to 'error'"
            DEPLOY_STATUS=error
          fi
          echo "DEPLOY_STATUS=${DEPLOY_STATUS}" >> ${GITHUB_OUTPUT}

      - name: Retrieve and display logs if deployment fails
        if: steps.check-deploy-status.outputs.DEPLOY_STATUS == 'failure'
        run: |
          LOG_GROUP_NAME="/ecs/${{ inputs.CLUSTER }}/${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.service }}"
          LOG_GROUP_EXISTS=$(aws logs describe-log-groups --log-group-name-prefix $LOG_GROUP_NAME --query 'logGroups[?logGroupName==`'$LOG_GROUP_NAME'`]' --output text)
          if [ -z "$LOG_GROUP_EXISTS" ]; then
            echo "Log group $LOG_GROUP_NAME does not exist."
          else
            echo "Log group $LOG_GROUP_NAME exists. Tailing logs..."
            aws logs tail $LOG_GROUP_NAME --since 15m
          fi
      
      - name: Map vars with github environment
        id: map-github-env
        if: always()
        run: |
          # Available env: development, testing, staging, or production
          # See .jira/config.yml for environments mapping with our clusters
          GITHUB_ENVIRONMENT=${{ inputs.CLUSTER }}
          echo "GITHUB_ENVIRONMENT=${GITHUB_ENVIRONMENT}" >> ${GITHUB_OUTPUT}

      - name: Create GitHub deployment
        id: github-deployment
        uses: chrnorm/deployment-action@v2
        if: always() && inputs.NOTIFICATIONS_JIRA == 'true'
        with:
          token: ${{ github.token }}
          # error, failure, in_progress, queued, pending, success, (inactive)
          initial-status: ${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          auto-inactive: false
          task: deploy-${{ inputs.CLUSTER }}-${{ inputs.IMAGE_SHA }}
          # Use log-url since JIRA does not display environment-url
          # environment-url: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
          # log-url: https://app.datadoghq.eu/logs?query=service:cloudwatch%20cluster:${{ inputs.CLUSTER }}%20%40service:${{ matrix.service }}
          # log-url: http://${{ matrix.service }}.${{ inputs.CLUSTER }}.ecs
          log-url: ${{ steps.tf-output.outputs.PRIVATE_URL }}
          environment: ${{ steps.map-github-env.outputs.GITHUB_ENVIRONMENT }}
          # Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future.
          transient-environment: ${{ inputs.CLUSTER != 'prod' }}
          description: ${{ matrix.service }} (${{ inputs.IMAGE_SHA }} / ${{ inputs.IMAGE_TAG }}) deployed on cluster ${{ inputs.CLUSTER }}

      - name: Deploy status style
        id: deploy-status-style
        if: always() && inputs.NOTIFICATIONS_TEAMS == 'true'
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          DEPLOY_COLOR=

          if [ "${DEPLOY_STATUS}" == "success" ]; then
            DEPLOY_STATUS="✅ ${DEPLOY_STATUS}"
            DEPLOY_COLOR=2cbe4e
          elif [ "${DEPLOY_STATUS}" == "failure" ]; then
            DEPLOY_STATUS="❗${DEPLOY_STATUS} ${{ matrix.service }} ne démarre pas correctement, un rollback a été tenté !"
            DEPLOY_COLOR=ffc107
          elif [ "${DEPLOY_STATUS}" == "error" ]; then
            DEPLOY_STATUS="❌ ${DEPLOY_STATUS} erreur de CICD, appelle un DevOps !"
            DEPLOY_COLOR=cb2431
          fi

          echo "DEPLOY_STATUS=${DEPLOY_STATUS}" >> ${GITHUB_OUTPUT}
          echo "DEPLOY_COLOR=${DEPLOY_COLOR}" >> ${GITHUB_OUTPUT}

      - name: Change string case function
        id: string
        uses: ASzc/change-string-case-action@v5
        if: always()
        with:
          string: ${{ inputs.CLUSTER }}

      - name: Login JIRA
        uses: atlassian/gajira-login@master
        if: |
          always() &&
          inputs.NOTIFICATIONS_JIRA == 'true' &&
          inputs.JIRA_CODE != '' &&
          steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success'
        env:
          JIRA_BASE_URL: https://sonergia.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      # # See https://github.com/atlassian/gajira-comment/issues/42
      # - name: Format JIRA comment with ADF
      #   id: format-jira-comment
      #   if: |
      #     always() &&
      #     inputs.NOTIFICATIONS_JIRA == 'true' &&
      #     inputs.JIRA_CODE != '' &&
      #     steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success'
      #   run: |
      #     JIRA_COMMENT=$(cat <<EOF
      #       {
      #         "version":1,
      #         "type":"doc",
      #         "content":[
      #           {
      #             "type":"paragraph",
      #             "content":[
      #               {
      #                 "type":"text",
      #                 "text":"Ticket déployé sur l'environnement ${{ steps.string.outputs.uppercase }}:"
      #               }
      #             ]
      #           },
      #           {
      #             "type":"bulletList",
      #             "content":[
      #               {
      #                 "type":"listItem",
      #                 "content":[
      #                   {
      #                     "type":"paragraph",
      #                     "content":[
      #                       {
      #                         "type":"text",
      #                         "text":"🔗 public",
      #                         "marks":[
      #                           {
      #                             "type":"link",
      #                             "attrs":{
      #                               "href":"${{ steps.tf-output.outputs.PUBLIC_URL }}"
      #                             }
      #                           }
      #                         ]
      #                       }
      #                     ]
      #                   }
      #                 ]
      #               },
      #               {
      #                 "type":"listItem",
      #                 "content":[
      #                   {
      #                     "type":"paragraph",
      #                     "content":[
      #                       {
      #                         "type":"text",
      #                         "text":"🔗 privé",
      #                         "marks":[
      #                           {
      #                             "type":"link",
      #                             "attrs":{
      #                               "href":"${{ steps.tf-output.outputs.PRIVATE_URL }}"
      #                             }
      #                           }
      #                         ]
      #                       },
      #                       {
      #                         "type":"hardBreak"
      #                       }
      #                     ]
      #                   }
      #                 ]
      #               },
      #               {
      #                 "type":"listItem",
      #                 "content":[
      #                   {
      #                     "type":"paragraph",
      #                     "content":[
      #                       {
      #                         "type":"text",
      #                         "text":"🐕 Datadog",
      #                         "marks":[
      #                           {
      #                             "type":"link",
      #                             "attrs":{
      #                               "href":"https://app.datadoghq.eu/logs?query=cluster:${{ inputs.CLUSTER }}%20servicename:%22${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.service }}%22&cols=privatedns,servicename"
      #                             }
      #                           }
      #                         ]
      #                       },
      #                       {
      #                         "type":"hardBreak"
      #                       }
      #                     ]
      #                   }
      #                 ]
      #               },
      #               {
      #                 "type":"listItem",
      #                 "content":[
      #                   {
      #                     "type":"paragraph",
      #                     "content":[
      #                       {
      #                         "type":"text",
      #                         "text":"📬 Mail",
      #                         "marks":[
      #                           {
      #                             "type":"link",
      #                             "attrs":{
      #                               "href":"http://mail.${{ inputs.CLUSTER }}.ecs:1080"
      #                             }
      #                           }
      #                         ]
      #                       },
      #                       {
      #                         "type":"hardBreak"
      #                       }
      #                     ]
      #                   }
      #                 ]
      #               }
      #             ]
      #           }
      #         ]
      #       }
      #     EOF
      #     )
      #     # Minify JSON (one line)
      #     JIRA_COMMENT=$(echo "${JIRA_COMMENT}" | jq -c)
      #     echo "JIRA_COMMENT=${JIRA_COMMENT}" >> ${GITHUB_OUTPUT}

      - name: Comment on JIRA issue
        uses: atlassian/gajira-comment@v3
        if: |
          always() &&
          inputs.NOTIFICATIONS_JIRA == 'true' &&
          inputs.JIRA_CODE != '' &&
          steps.check-deploy-status.outputs.DEPLOY_STATUS == 'success'
        with:
          issue: ${{ inputs.JIRA_CODE }}
          comment: |
            Ticket déployé sur l'environnement ${{ steps.string.outputs.uppercase }}:
              - 🔗 public: ${{ steps.tf-output.outputs.PUBLIC_URL }}
              - 🔗 privé: ${{ steps.tf-output.outputs.PRIVATE_URL }}
              - 🐕 Datadog: https://app.datadoghq.eu/logs?query=cluster:${{ inputs.CLUSTER }}%20servicename:%22${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.service }}%22&cols=privatedns,servicename
              - 📬 Mail: http://mail.${{ inputs.CLUSTER }}.ecs:1080
              - ☁️ AWS console: https://${{ inputs.AWS_DEFAULT_REGION }}.console.aws.amazon.com/ecs/v2/clusters/${{ inputs.CLUSTER }}/services/${{ matrix.service }}/health

      # Notify at the end of workflow
      - name: Notify teams channel
        if: always() && inputs.NOTIFICATIONS_TEAMS == 'true'
        uses: sonergia/github-reusable-workflows/.github/actions/ms-teams-notification@2.x
        continue-on-error: true
        with:
          MS_TEAMS_WEBHOOK_URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          ENVIRONMENT: ${{ inputs.CLUSTER }}
          SUMMARY: Déploiement service ${{ matrix.service }} -> ${{ inputs.CLUSTER }} terminé !
          COLOR: ${{ steps.deploy-status-style.outputs.DEPLOY_COLOR }}
          COMMIT_MESSAGE: ${{ steps.git-commit.outputs.COMMIT_MESSAGE }}
          JIRA_CODE: ${{ inputs.JIRA_CODE }}
          FACT_STATUS: ${{ steps.deploy-status-style.outputs.DEPLOY_STATUS }}
          FACT_TYPE_NAME: Service
          FACT_TYPE_VALUE: ${{ matrix.service }}
          ACTION_PRIVATE_URL: "${{ steps.tf-output.outputs.PRIVATE_URL }}"
          ACTION_PUBLIC_URL: "${{ steps.tf-output.outputs.PUBLIC_URL }}"
          ACTION_DATADOG_URL: "https://app.datadoghq.eu/logs?query=cluster:${{ inputs.CLUSTER }}%20servicename:%22${{ inputs.SERVICE_NAMESPACE }}/${{ matrix.service }}%22&cols=privatedns,servicename"
          ACTION_MAIL_URL: "http://mail.${{ inputs.CLUSTER }}.ecs:1080"
          ACTION_AWS_URL: "https://${{ inputs.AWS_DEFAULT_REGION }}.console.aws.amazon.com/ecs/v2/clusters/${{ inputs.CLUSTER }}/services/${{ matrix.service }}/health"

      - name: Exit if deploy failed
        if: always()
        run: |
          DEPLOY_STATUS=${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
          if [ ${DEPLOY_STATUS} != 'success' ]; then
            exit 1
          fi

    outputs:
      DEPLOY_STATUS: ${{ steps.check-deploy-status.outputs.DEPLOY_STATUS }}
