name: terraform deploy service workflow

on:
  workflow_call:
    inputs:
      AWS_DEFAULT_REGION:
        required: true
        type: string
      CLUSTER:
        required: true
        type: string
      SERVICES:
        required: true
        type: string
      IMAGE_SHA:
        required: false
        type: string
        default: null
      IMAGE_TAG:
        required: false
        type: string
        default: null
      # FORCE_DEPLOYMENT is not bool because output transforms it in text
      FORCE_DEPLOYMENT:
        required: true
        type: string
      DNS_PREFIX:
        required: false
        type: string
        default: null
    secrets:
      AWS_ACCESS_KEY_ID_TF:
        required: true
      AWS_SECRET_ACCESS_KEY_TF:
        required: true
      GH_TF_SSH_KEY:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ inputs.CLUSTER }}
  cancel-in-progress: false

jobs:
  deploy-service:
    name: Terraform deploy service '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'
    runs-on: [self-hosted, "${{ inputs.CLUSTER }}"]

    strategy:
      matrix:
        service: ${{ fromJson(inputs.SERVICES) }}

    steps:
      - uses: actions/checkout@v3

      - name: Check required inputs
        run: |
          # Check that at least IMAGE_TAG is provided
          if [ -z "${{ inputs.IMAGE_SHA }}" ]; then
            if [ -z "${{ inputs.IMAGE_TAG }}" ]; then
              echo "::error title=Deploy service::Input error: IMAGE_SHA and IMAGE_TAG can not be both empty ('${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}')"
              exit 1
            fi
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TF }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TF }}
          aws-region: ${{ inputs.AWS_DEFAULT_REGION }}

      # - uses: actions/setup-node@v2
      #   with:
      #     node-version: '14'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          terraform_wrapper: false # Fix "/usr/bin/env: ‘node’: No such file or directory"

      - name: Terraform init service '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}' configuration
        env:
          GIT_SSH_COMMAND: "echo '${{ secrets.GH_TF_SSH_KEY }}' > id_rsa
            && ssh-keyscan github.com > known_hosts
            && chmod 600 id_rsa known_hosts
            && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}
          terraform init -reconfigure -upgrade -backend-config=backend-${{ inputs.CLUSTER }}.conf

      - name: Terraform validate
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}
          terraform validate -no-color

      - name: Terraform apply service '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'
        working-directory: ./.terraform/services
        run: |
          cd ${{ matrix.service }}

          DOCKER_IMAGE_TAG=${{ inputs.IMAGE_SHA }}

          if [ -z "${{ inputs.IMAGE_SHA }}" ]; then
            DOCKER_IMAGE_TAG=${{ inputs.IMAGE_TAG }}
          fi

          echo "::debug title=Deploy service::Docker image tag is ${DOCKER_IMAGE_TAG}"

          EXTRA_PARAMS=

          if [ "${{ inputs.FORCE_DEPLOYMENT }}" == "true" ]; then
            EXTRA_PARAMS="${EXTRA_PARAMS} -replace=module.${{ matrix.service }}-service.aws_ecs_task_definition.task"
            echo "::debug title=Deploy service::Force deployment has been set"
          fi

          if [ ! -z "${{ env.DNS_PREFIX }}" ]; then
            EXTRA_PARAMS="${EXTRA_PARAMS} -var "dns_prefix=${{ env.DNS_PREFIX }}""
            echo "::debug title=Deploy service::A dns prefix has been set"
          fi

          echo "::notice title=Deploy service::Terraform is deploying '${{ matrix.service }}' on cluster '${{ inputs.CLUSTER }}'"

          terraform apply \
            -auto-approve \
            -var-file terraform-${{ inputs.CLUSTER }}.tfvars \
            -var "image_tag=${DOCKER_IMAGE_TAG}" \
            -var "use_bastion_ssh_tunnel=false" \
            ${FORCE_DEPLOY_PARAM}
